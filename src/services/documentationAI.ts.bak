import { DocumentationAnalysisResult, DocumentationResult, DocumentationOptions, CodeFile } from '../types/documentation';

class DocumentationAIService {
  private endpoint: string;
  private apiKey: string;
  private deploymentName: string;

  constructor() {
    const endpoint = import.meta.env.VITE_AZURE_OPENAI_ENDPOINT;
    const apiKey = import.meta.env.VITE_AZURE_OPENAI_API_KEY;
    
    if (!endpoint || !apiKey) {
      throw new Error('Azure OpenAI configuration is missing');
    }

    this.endpoint = endpoint;
    this.apiKey = apiKey;
    this.deploymentName = import.meta.env.VITE_AZURE_OPENAI_DEPLOYMENT_NAME;
  }

  private async makeRequest(messages: Array<{ role: string; content: string }>, options: { temperature: number; maxTokens: number }) {
    const url = `${this.endpoint}/openai/deployments/${this.deploymentName}/chat/completions?api-version=2024-02-15-preview`;
    
    const response = await fetch(url, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'api-key': this.apiKey,
      },
      body: JSON.stringify({
        messages,
        temperature: options.temperature,
        max_tokens: options.maxTokens,
      }),
    });

    if (!response.ok) {
      throw new Error(`Azure OpenAI API request failed: ${response.status} ${response.statusText}`);
    }

    const data = await response.json();
    return data;
  }

  async analyzeCodeForDocumentation(files: CodeFile[]): Promise<DocumentationAnalysisResult> {
    try {
      const codeContent = files.map(file => `// File: ${file.name} (${file.language})\n${file.content || ''}`).join('\n\n');
      
      const prompt = `
        Analyze the following code for documentation generation:

        ${codeContent}

        Please provide your analysis in the following JSON format:
        {
          "codeStructure": ["component1", "component2", ...],
          "mainComponents": ["main function", "key classes", ...],
          "apiEndpoints": ["endpoint1", "endpoint2", ...],
          "dependencies": ["dependency1", "dependency2", ...],
          "complexity": "Low/Medium/High",
          "recommendations": ["recommendation1", "recommendation2", ...]
        }

        Focus on:
        1. Overall code structure and architecture
        2. Main components, classes, and functions
        3. API endpoints or public interfaces
        4. External dependencies and libraries
        5. Code complexity assessment
        6. Recommendations for documentation approach
      `;

      const response = await this.makeRequest(
        [
          {
            role: 'system',
            content: 'You are an expert technical writer and code analyst. Analyze code to understand its structure and provide recommendations for comprehensive documentation.'
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        {
          temperature: 0.3,
          maxTokens: 2000,
        }
      );

      const content = response.choices[0]?.message?.content;
      if (!content) {
        throw new Error('No response from Azure OpenAI');
      }

      const jsonMatch = content.match(/\{[\s\S]*\}/);
      if (!jsonMatch) {
        throw new Error('Invalid JSON response from AI');
      }

      return JSON.parse(jsonMatch[0]);
    } catch (error) {
      console.error('Error analyzing code for documentation:', error);
      throw new Error('Failed to analyze code with Azure GPT-4');
    }
  }

  async generateDocumentation(
    files: CodeFile[],
    documentationType: string,
    options: DocumentationOptions
  ): Promise<DocumentationResult> {
    try {
      const codeContent = files.map(file => `// File: ${file.name} (${file.language})\n${file.content || ''}`).join('\n\n');
      
      const optionsText = Object.entries(options)
        .filter(([_, value]) => value)
        .map(([key, _]) => {
          switch (key) {
            case 'includeCodeExamples': return 'Include practical code examples';
            case 'generateDiagrams': return 'Generate architecture diagrams';
            case 'includeAPIReference': return 'Include comprehensive API reference';
            case 'addInstallationGuide': return 'Add detailed installation instructions';
            case 'generateTOC': return 'Generate table of contents';
            case 'includeChangelog': return 'Include version history and changelog';
            default: return key;
          }
        })
        .join(', ');

      const documentationTypeInstructions = this.getDocumentationTypeInstructions(documentationType);

      const prompt = `
        Generate comprehensive ${documentationType} documentation for the following code:
        
        Documentation requirements:
        ${optionsText}

        Code to document:
        ${codeContent}

        ${documentationTypeInstructions}

        Please provide your response in the following JSON format:
        {
          "originalCode": "Brief summary of the original code",
          "generatedDocumentation": "The complete generated documentation",
          "summary": "Brief summary of the documentation generated",
          "sections": ["section1", "section2", ...],
          "filesGenerated": 1,
          "warnings": ["warning1", "warning2", ...],
          "appliedSettings": ["setting1", "setting2", ...],
          "features": ["feature1", "feature2", ...],
          "documentationFiles": [
            {
              "name": "README.md",
              "content": "documentation content",
              "type": "documentation"
            },
            {
              "name": "API.md", 
              "content": "api documentation content",
              "type": "api"
            },
            {
              "name": "INSTALL.md",
              "content": "installation guide content", 
              "type": "guide"
            }
          ]
        }

        Ensure the documentation:
        1. Is comprehensive and well-structured
        2. Uses proper markdown formatting
        3. Includes clear examples and explanations
        4. Follows documentation best practices
        5. Is suitable for both technical and non-technical audiences
        ${options.includeCodeExamples ? '6. Includes practical, working code examples' : ''}
        ${options.generateDiagrams ? '7. Includes ASCII diagrams or mermaid syntax for visual representation' : ''}
        ${options.includeAPIReference ? '8. Provides detailed API reference with parameters and return values' : ''}
        ${options.addInstallationGuide ? '9. Includes step-by-step installation and setup instructions' : ''}
        ${options.generateTOC ? '10. Includes a comprehensive table of contents' : ''}
      `;

      const response = await this.makeRequest(
        [
          {
            role: 'system',
            content: 'You are an expert technical writer specializing in software documentation. Create clear, comprehensive, and well-structured documentation that serves both developers and end users.'
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        {
          temperature: 0.2,
          maxTokens: 4000,
        }
      );

      const content = response.choices[0]?.message?.content;
      if (!content) {
        throw new Error('No response from Azure OpenAI');
      }

      const jsonMatch = content.match(/\{[\s\S]*\}/);
      if (!jsonMatch) {
        throw new Error('Invalid JSON response from AI');
      }

      return JSON.parse(jsonMatch[0]);
    } catch (error) {
      console.error('Error generating documentation:', error);
      throw new Error('Failed to generate documentation with Azure GPT-4');
    }
  }

  private getDocumentationTypeInstructions(documentationType: string): string {
    const instructions: Record<string, string> = {
      'readme': `
        Create a comprehensive README.md that includes:
        - Project title and description
        - Installation instructions
        - Usage examples
        - API documentation (if applicable)
        - Contributing guidelines
        - License information
        Use proper markdown formatting with headers, code blocks, and lists.
      `,
      'api-docs': `
        Create detailed API documentation that includes:
        - Overview of all endpoints/methods
        - Request/response examples
        - Parameter descriptions
        - Error codes and handling
        - Authentication requirements
        - Rate limiting information
        Format as markdown with clear sections and code examples.
      `,
      'technical-spec': `
        Create a technical specification document that includes:
        - System architecture overview
        - Component descriptions
        - Data flow diagrams
        - Database schema (if applicable)
        - Security considerations
        - Performance requirements
        Use technical language appropriate for developers and architects.
      `,
      'user-guide': `
        Create a user-friendly guide that includes:
        - Getting started tutorial
        - Step-by-step instructions
        - Screenshots or visual aids (described)
        - Common use cases
        - FAQ section
        - Troubleshooting tips
        Write in clear, non-technical language for end users.
      `,
      'installation-guide': `
        Create detailed installation instructions that include:
        - System requirements
        - Prerequisites
        - Step-by-step installation process
        - Configuration options
        - Verification steps
        - Common installation issues
        Provide instructions for multiple platforms if applicable.
      `,
      'deployment-guide': `
        Create a deployment guide that includes:
        - Deployment prerequisites
        - Environment setup
        - Build and deployment steps
        - Configuration management
        - Monitoring and logging
        - Rollback procedures
        Include both development and production deployment scenarios.
      `
    };

    return instructions[documentationType] || instructions['readme'];
  }
}

export const documentationAIService = new DocumentationAIService();